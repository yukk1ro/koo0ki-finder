const { Events } = require('discord.js');
const { role, log } = require('../config.json')
const DB =  require('db.simple')
const db = new DB.Database()
function padZero(num) {
  return num.toString().padStart(2, '0');
}
function formatTime(timestamp) {
  const date = new Date(timestamp);
  const hours = padZero(date.getHours());
  const minutes = padZero(date.getMinutes());
  return `${hours}:${minutes}`;
}
function random(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min) + min);
  }
  function hasRole(guild,userID, roleId) {
    try {
    const member = guild.members.cache.get(userID);
     const role = member.roles.cache.get(roleId);
    return !!role;
} catch {}
  }
function giveRole(guild, userId, roleId) {
    try {
    const member = guild.members.cache.get(userId);
    const role = guild.roles.cache.get(roleId);

    member.roles.add(role)
} catch {}
}
function takeRole(guild, userId, roleId) {
    try {
    const member = guild.members.cache.get(userId);
    const role = guild.roles.cache.get(roleId);

    member.roles.remove(role)
} catch {}
}
module.exports = {
	name: Events.InteractionCreate,
	async execute(interaction, client) {
		if (interaction.isChatInputCommand()) {
			const command = interaction.client.commands.get(interaction.commandName);

			if (!command) {
				console.error(`No command matching ${interaction.commandName} was found.`);
				return;
			}

			try {
				await command.execute(interaction);
			} catch (error) {
				console.error(`Error executing ${interaction.commandName}`);
				console.error(error);
			}
		} else if (interaction.isButton()) {
      const { SlashCommandBuilder,EmbedBuilder, ModalBuilder, TextInputBuilder,TextInputStyle ,StringSelectMenuOptionBuilder, ButtonBuilder, ActionRowBuilder, ButtonStyle, StringSelectMenuBuilder, ComponentType } = require('discord.js');
      if (interaction.customId == 'skip') {
        if (!(db.get('forms') || []).some((x) => x.user == interaction.user.id)) return interaction.reply({content: `–£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã`, ephemeral:true});
        let filter = db.get('filter_' + interaction.user.id)
        let form
        if(!!filter) {
            if (filter == '0') form = (db.get('forms') || []).filter((obj) => obj.gender.toLowerCase() == '–º—É–∂—Å–∫–æ–π').filter((obj) => obj.user != interaction.user.id)
            if (filter == '1') form = (db.get('forms') || []).filter((obj) => obj.gender.toLowerCase() == '–∂–µ–Ω—Å–∫–∏–π').filter((obj) => obj.user != interaction.user.id)
        } else {
            form = db.get('forms').filter((obj) => obj.user != interaction.user.id) || []
        }
        if (form.length == 0) return interaction.reply({content: `–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –ø—É—Å—Ç—ã–µ`, ephemeral:true});
        let obj = form[Math.floor(Math.random() * form.length)]
        const embed = new EmbedBuilder()
        .setColor('2B2D31')
        .setTitle('–ù–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!')
        .setFields({name: '**–ò–º—è**', value: "```" + obj.name + "```", inline:true},
          {name: '**–í–æ–∑—Ä–∞—Å—Ç**', value: "```" + obj.age + "```", inline:true},
          {name: '**–ü–æ–ª**', value: "```" + obj.gender + "```", inline:true},
          {name: '**–û–±–æ –º–Ω–µ**', value: "```" + obj.bio + "```"},
        )
        const like = new ButtonBuilder()
        .setCustomId('like_' + obj.user)
        .setLabel('‚ù§Ô∏è')
        .setStyle(ButtonStyle.Secondary);

        const likewithmsg = new ButtonBuilder()
        .setCustomId('likemsg_' + obj.user)
        .setLabel('üíå')
        .setStyle(ButtonStyle.Secondary);

        const skip = new ButtonBuilder()
        .setCustomId('skip')
        .setLabel('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
        .setStyle(ButtonStyle.Primary);

        const row = new ActionRowBuilder().addComponents(like,likewithmsg,skip)

        await interaction.update({embeds:[embed],components:[row]})
      }
      if (interaction.customId == 'ignor') {
        await interaction.message.delete()
      }
      if (interaction.customId.startsWith('like1_')) {
        let id = interaction.customId.split('_')[1]
        const dm = await interaction.client.users.fetch(id)
        var embed = new EmbedBuilder()
        .setColor('2B2D31')
        .setTitle(`–í–∞–º –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é`)
        .setDescription(`${interaction.user}, –æ—Ç–≤–µ—Ç–∏–ª –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é –Ω–∞ –≤–∞—à –ª–∞–π–∫`)
        .setThumbnail(interaction.user.avatarURL())
        var button = new ButtonBuilder()
	      .setLabel('–ù–∞–ø–∏—Å–∞—Ç—å')
	      .setURL('https://discord.com/users/' + interaction.user.id)
      	.setStyle(ButtonStyle.Link);
        var row = new ActionRowBuilder().addComponents(button)
        await dm.send({embeds:[embed],components:[row]})
        var embed = new EmbedBuilder()
        .setColor('2B2D31')
        .setTitle(`–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é`)
        .setDescription(`${interaction.user}, –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤–∑–∞–∏–º–Ω–æ –Ω–∞ –ª–∞–π–∫ <@${id}>`)
        .setThumbnail(interaction.user.avatarURL())
        var button = new ButtonBuilder()
	      .setLabel('–ù–∞–ø–∏—Å–∞—Ç—å')
	      .setURL('https://discord.com/users/' + id)
      	.setStyle(ButtonStyle.Link);
        var row = new ActionRowBuilder().addComponents(button)
        await interaction.update({embeds:[embed],components:[row]})
        db.add('likes2_' + id,1)
        db.get('likes2_' + interaction.user.id,1)

      }
      if (interaction.customId.startsWith('likemsg_')) {
        if (!(db.get('forms') || []).some((x) => x.user == interaction.user.id)) return interaction.reply({content: `–£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã`, ephemeral:true});
        let id = interaction.customId.split('_')[1]
        const modal = new ModalBuilder()
        .setCustomId('like_' + id)
        .setTitle('–õ–∞–π–∫ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º');
        const text = new TextInputBuilder()
        .setCustomId('name')
        .setMinLength(1)
        .setMaxLength(100)
        .setLabel("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
        .setStyle(TextInputStyle.Paragraph);
        const in1 = new ActionRowBuilder().addComponents(text);
        modal.addComponents(in1);

        await interaction.showModal(modal);
      }

      if (interaction.customId.startsWith('like_')) {
        if (!(db.get('forms') || []).some((x) => x.user == interaction.user.id)) return interaction.reply({content: `–£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã`, ephemeral:true});
        let id = interaction.customId.split('_')[1]
        db.add('likes_' + id,1)
        const dm = await interaction.client.users.fetch(id)
        let obj = (db.get('forms') || []).filter((obj) => obj.user == interaction.user.id)[0]
        const embed = new EmbedBuilder()
        .setColor('2B2D31')
        .setTitle(`–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∫–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å`)
        .setDescription(`**–ê–Ω–∫–µ—Ç–∞ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å:**`)
        .addFields({name: '**–ò–º—è**', value: "```" + obj.name + "```", inline:true},
          {name: '**–í–æ–∑—Ä–∞—Å—Ç**', value: "```" + obj.age + "```", inline:true},
          {name: '**–ü–æ–ª**', value: "```" + obj.gender + "```", inline:true},
          {name: '**–û–±–æ –º–Ω–µ**', value: "```" + obj.bio + "```"},)
          const like = new ButtonBuilder()
          .setCustomId('like1_' + obj.user)
          .setLabel('‚ù§Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é')
          .setStyle(ButtonStyle.Secondary);
  
          const ignor = new ButtonBuilder()
          .setCustomId('ignor')
          .setLabel('–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å')
          .setStyle(ButtonStyle.Secondary);
          const row = new ActionRowBuilder().addComponents(like,ignor)
        await dm.send({embeds:[embed],components:[row]})
        const embed2 = new EmbedBuilder()
        .setColor('2B2D31')
        .setTitle('–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è')
        .setDescription(`–í—ã —É—Å–ø–µ—à–Ω–æ –ª–∞–π–∫–Ω—É–ª–∏ –∞–Ω–∫–µ—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è —á–µ–ª–æ–≤–µ–∫—É, —Ç–æ –≤–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!`)
        const skip = new ButtonBuilder()
        .setCustomId('skip')
        .setLabel('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ')
        .setStyle(ButtonStyle.Primary);

        const row2 = new ActionRowBuilder().addComponents(skip)

        await interaction.update({embeds:[embed2],components:[row2]})


      }
		} else if (interaction.isStringSelectMenu()) {

		} else if (interaction.isUserSelectMenu()) {
        }
	},
};