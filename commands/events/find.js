const { SlashCommandBuilder,EmbedBuilder, ModalBuilder, TextInputBuilder,TextInputStyle ,StringSelectMenuOptionBuilder, ButtonBuilder, ActionRowBuilder, ButtonStyle, StringSelectMenuBuilder, ComponentType } = require('discord.js');
const DB =  require('db.simple')
const db = new DB.Database()
module.exports = {
	data: new SlashCommandBuilder()
		.setName('find')
		.setDescription('–ù–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞')
        .addStringOption(option =>
            option.setName('filter-by-gender')
              .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–µ–Ω–¥–µ—Ä—É')
              .setRequired(false)
              .addChoices(
                { name: '–ú—É–∂—Å–∫–æ–π', value: '0' },
                { name: '–ñ–µ–Ω—Å–∫–∏–π', value: '1' },
              )),
    async execute(interaction) {
        if (!(db.get('forms') || []).some((x) => x.user == interaction.user.id)) return interaction.reply({content: `–£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã`, ephemeral:true});
        let filter = interaction.options.getString('filter-by-gender')
        let form
        if(!!filter) {
            if (filter == '0') form = (db.get('forms') || []).filter((obj) => obj.gender.toLowerCase() == '–º—É–∂—Å–∫–æ–π').filter((obj) => obj.user != interaction.user.id)
            if (filter == '1') form = (db.get('forms') || []).filter((obj) => obj.gender.toLowerCase() == '–∂–µ–Ω—Å–∫–∏–π').filter((obj) => obj.user != interaction.user.id)
            db.set('filter_' + interaction.user.id,filter)
        } else {
            db.delete('filter_' + interaction.user.id)
            form = db.get('forms').filter((obj) => obj.user != interaction.user.id) || []
        }
        if (form.length == 0) return interaction.reply({content: `–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –ø—É—Å—Ç—ã–µ`, ephemeral:true});
        let obj = form[Math.floor(Math.random() * form.length)]
        const embed = new EmbedBuilder()
        .setColor('2B2D31')
        .setTitle('–ù–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!')
        .setFields({name: '**–ò–º—è**', value: "```" + obj.name + "```", inline:true},
          {name: '**–í–æ–∑—Ä–∞—Å—Ç**', value: "```" + obj.age + "```", inline:true},
          {name: '**–ü–æ–ª**', value: "```" + obj.gender + "```", inline:true},
          {name: '**–û–±–æ –º–Ω–µ**', value: "```" + obj.bio + "```"},
        )
        const like = new ButtonBuilder()
        .setCustomId('like_' + obj.user)
        .setLabel('‚ù§Ô∏è')
        .setStyle(ButtonStyle.Secondary);

        const likewithmsg = new ButtonBuilder()
        .setCustomId('likemsg_' + obj.user)
        .setLabel('üíå')
        .setStyle(ButtonStyle.Secondary);

        const skip = new ButtonBuilder()
        .setCustomId('skip')
        .setLabel('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
        .setStyle(ButtonStyle.Primary);

        const row = new ActionRowBuilder().addComponents(like,likewithmsg,skip)

        await interaction.reply({embeds:[embed], ephemeral:true,components:[row]})
    }
};